sequenceDiagram
    participant main
    participant FileDataExtractor
    participant House
    participant VacuumCleaner
    participant Controller
    participant Algorithm

    main->>FileDataExtractor: readAndExtract(fileName)
    FileDataExtractor-->>main: extracted data
    main->>House: House(inputData.getHouseMap(), dockingX, dockingY)
    main->>VacuumCleaner: VacuumCleaner(dockingX, dockingY, inputData.getMaxBatterySteps())
    main->>Controller: Controller(house, vacuumCleaner, inputData.getMaxSteps())
    main->>Controller: run()

    Controller->>Algorithm: Algorithm(batterySensor, wallSensor, dirtSensor)
    Controller->>Controller: vacuumLoop()
    Controller->>House: getDockingLocation(location)
    loop vacuumLoop
        Controller->>VacuumCleaner: getBatteryLevel()
        VacuumCleaner-->>Controller: currentBatteryLevel
        Controller->>VacuumCleaner: isAtLocation(dockingLocation)
        VacuumCleaner-->>Controller: atDockingStation
        Controller->>House: getTotalDirt()
        House-->>Controller: totalDirt
        alt mission completed
            Controller->>Controller: set missionCompleted
        else mission failed
            Controller->>Controller: set missionFailed
        end
        alt atDockingStation
            Controller->>VacuumCleaner: increaseChargeBy(1)
            Controller->>Controller: increment stepsTaken
            Controller->>Controller: push step STAY
        else next step
            Controller->>Algorithm: decideNextStep()
            Algorithm-->>Controller: nextStep
            Controller->>VacuumCleaner: move(nextStep)
            Controller->>VacuumCleaner: decreaseChargeBy(1)
            Controller->>House: decreaseDirtLevel(vacuumCleanerLocation, 1) if nextStep == STAY
            Controller->>Controller: increment stepsTaken
            Controller->>Controller: push step nextStep
        end
    end
    Controller->>Controller: write results to output.txt
