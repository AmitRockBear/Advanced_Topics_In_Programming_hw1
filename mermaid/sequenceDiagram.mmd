sequenceDiagram
    participant User
    participant Main as main()
    participant Logger as Logger
    participant FileDataExtractor as FileDataExtractor
    participant House as House
    participant VacuumCleaner as VacuumCleaner
    participant Controller as Controller

    User ->> Main: Start program with file argument
    Main ->> Logger: getInstance()
    Logger ->> Main: logger
    Main ->> Logger: logInfo("Starting the program with file: " + fileName)
    Main ->> FileDataExtractor: readAndExtract(fileName)
    FileDataExtractor -->> Main: Extraction results

    Main ->> House: House(inputData.getHouseMap(), dockingX, dockingY)
    Main ->> VacuumCleaner: VacuumCleaner(dockingX, dockingY, inputData.getMaxBatterySteps())
    Main ->> Controller: Controller(house, vacuumCleaner, inputData.getMaxSteps())
    
    Controller ->> Logger: logInfo("Controller successfully initialized with maxSteps: " + std::to_string(maxSteps))
    Main ->> Controller: run()
    Controller ->> Logger: logInfo("Starting vacuum cleaner")
    
    loop Until missionCompleted or missionFailed
        Controller ->> House: getTotalDirt()
        Controller ->> VacuumCleaner: getBatteryLevel()
        Controller ->> VacuumCleaner: getLocation(currentVacuumLocation)
        Controller ->> Logger: logInfo("Step details...")
        Controller ->> House: getDockingLocation(dockingLocation)
        alt House.getTotalDirt() == 0 and atDockingStation
            Controller ->> Logger: logInfo("Mission completed!")
            %% break
        end
        alt (currentBatteryLevel == 0 and !atDockingStation) or maxSteps - stepsTaken == 0
            Controller ->> Logger: logInfo("Mission failed!")
            %% break
        end
        alt currentBatteryLevel < VacuumCleaner.getMaxBatterySteps() and atDockingStation
            Controller ->> Logger: logInfo("Charging...")
            Controller ->> VacuumCleaner: increaseChargeBy(steps)
            Controller ->> House: houseVisualization(vacuumCleanerLocation)
        else
            Controller ->> Algorithm: decideNextStep()
            Algorithm -->> Controller: nextStep
            Controller ->> VacuumCleaner: move(nextStep)
            Controller ->> House: decreaseDirtLevel(vacuumCleanerLocation, 1)
            Controller ->> VacuumCleaner: decreaseChargeBy(1)
            Controller ->> House: houseVisualization(vacuumCleanerLocation)
        end
        Controller ->> Logger: logInfo("End of Step")
    end
    Controller ->> Logger: logInfo("Controller finished running")
    Controller ->> Main: Finished
    Main ->> Logger: logInfo("Program finished successfully")
