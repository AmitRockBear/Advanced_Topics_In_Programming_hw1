classDiagram
    class Algorithm {
        +Algorithm(std::function<double()> batterySensor, std::function<bool(char)> wallSensor, std::function<int(char)> dirtSensor)
        +char decideNextStep()
        -void calcValidMoves(std::vector<char>& moves)
        -char oppositeMove(char move) const
        -std::stack<char> stepsBack
        -Point distanceFromDock
        -bool isBacktracking
        -std::function<double> batterySensor
        -std::function<bool,char> wallSensor
        -std::function<int,char> dirtSensor
    }

    class Point {
        int x
        int y
        +Point(int x, int y)
        +int getX()
        +void setX(int newX)
        +int getY()
        +void setY(int newY)
        +void move(char direction)
        +void moveToNeighbor(char direction)
        +bool operator==(const Point& other)
        +std::string toString()
    }

    class VacuumCleaner {
        -Point location
        -double battery
        -int maxBatterySteps
        +VacuumCleaner(int x, int y, int maxBatterySteps)
        +void move(char direction)
        +void increaseChargeBy(int steps)
        +void decreaseChargeBy(int steps)
        +double getBatteryLevel() const
        +int getMaxBatterySteps() const
        +bool isAtLocation(Point& otherLocation) const
        +int getX() const
        +int getY() const
        +void getLocation(Point& locationToModify) const
    }

    class House {
        -int totalDirt
        -std::vector<std::vector<int>> houseMap
        -Point dockingLocation
        +House(const std::vector<std::vector<int>>& houseMap, int dockingX, int dockingY)
        +int getDirtLevel(Point& location) const
        +void decreaseDirtLevel(Point& location, int decreaseBy)
        +bool isWall(Point& location) const
        +int getTotalDirt() const
        +void getDockingLocation(Point& locationToModify) const
        +void houseVisualization(Point vacuumLocation) const
    }

    class FileDataExtractor {
        -int dockingX
        -int dockingY
        -int maxSteps
        -int maxBatterySteps
        -std::vector<std::vector<int>> houseMap
        +FileDataExtractor()
        +int getDockingX() const
        +int getDockingY() const
        +int getMaxSteps() const
        +int getMaxBatterySteps() const
        +std::vector<std::vector<int>>& getHouseMap()
        +bool readAndExtract(const std::string& fileName)
    }

    class Controller {
        -House house
        -VacuumCleaner vacuumCleaner
        -Algorithm algorithm
        -int maxSteps
        -int stepsTaken
        -bool missionCompleted
        -bool missionFailed
        -std::vector<char> steps
        +Controller(House& house, VacuumCleaner& vacuumCleaner, int maxSteps, int stepsTaken, bool missionCompleted, bool missionFailed)
        +void run()
    }

    class Logger {
        - std::ofstream logFile
        - Logger()
        - ~Logger()
        - Logger(const Logger&) = delete
        - Logger& operator=(const Logger&) = delete
        + getInstance(): Logger&
        + logInfo(message: std::string)
        + logError(message: std::string)
        - logToFile(message: std::string)
        - logToStdout(message: std::string)
        - logToStderr(message: std::string)
    }

    class Config {
        - std::unordered_map<std::string, std::string> configMap
        - Config()
        - ~Config()
        - Config(const Config&) = delete
        - Config& operator=(const Config&) = delete
        - load(filePath: std::string)
        + getInstance(): Config&
        + get(key: std::string): const std::string&
    }

    Algorithm --> Point
    Algorithm --> Logger
    FileDataExtractor --> Logger
    Controller --> House
    Controller --> VacuumCleaner
    Controller --> Algorithm
    Controller --> Point
    Controller --> Logger
    Controller --> Config
    House --> Point
    House --> Logger
    VacuumCleaner --> Point
    VacuumCleaner --> Logger
